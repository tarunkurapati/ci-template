buildscript {
    repositories {
		mavenLocal()
		mavenCentral()
	}
	dependencies {
		classpath 'com.eriwen:gradle-js-plugin:1.1'
	}
}

apply plugin: 'js'

defaultTasks 'all'
buildDir = 'target'

def testDir = 'test'


task clean(type: Delete) {
	delete buildDir
}

task init(type: Directory, dependsOn: 'clean', description: 'Creates artifact output directories') {
	outputs.dir(buildDir)
	doLast {
		file(buildDir).mkdirs()
	}
}

task wrapper(type: Wrapper) {
	gradleVersion = '1.1'
}


task combinejs(type: com.eriwen.gradle.js.tasks.CombineJsTask) {
    source = ["RAL.js"]
   // source = ["${projectDir}/js/file1.js", "${projectDir}/js/file2.js"]
    dest = file("${buildDir}/all.js")
}


task minifyjs(type: com.eriwen.gradle.js.tasks.MinifyJsTask) {
    source = combinejs
    dest = file("${buildDir}/all-min.js")
    closure {
        warningLevel = 'QUIET'
    }
}

task gzipjs(type: com.eriwen.gradle.js.tasks.GzipJsTask) {
    source = minifyjs
    dest = file("${buildDir}/all-min.js")
}

task jshintjs(type: com.eriwen.gradle.js.tasks.JsHintTask) {
    source = combinejs
    dest = file("${buildDir}/jshint.out")
}

task jsdocjs(type: com.eriwen.gradle.js.tasks.JsDocTask) {
    source = ["RAL.js"]
   // source = ["${projectDir}/js/file1.js", "${projectDir}/js/file2.js"]
    destinationDir = file("${buildDir}/jsdoc")
}



task test(dependsOn: 'init') << {
	description = 'run QUnit tests and create JUnit test reports'

	def specs = []
	new File(testDir).eachFile {
		if (it.name.endsWith('.html')) {
			specs << it
		}
	}

	def phantomJsPath = '/usr/local/phantomjs/bin/phantomjs'
	def startTime = new Date().time
	def numFailures = 0
	def testsFailed = false
	specs.each { File spec ->
		print "Running ${spec.name}..."

		def outputFile = "${buildDir}/TEST-${spec.name.replace('-', '').replace('.html', '.xml')}"
		ant.exec(outputproperty: 'cmdOut', errorproperty: 'cmdErr',
				resultproperty: 'exitCode', failonerror: 'false', executable: phantomJsPath) {
			arg(value: 'test/lib/phantomjs-qunit-runner.js')
			arg(value: spec.canonicalPath)
		}
		// Check exit code
		if (ant.project.properties.exitCode != '0') {
			testsFailed = true
			numFailures++
			println 'FAILED'
		} else {
			println 'PASSED'
		}

		new File(outputFile).write(ant.project.properties.cmdOut)
	}

	println "QUnit tests completed in ${new Date().time - startTime}ms"
	println "QUnit Tests ${testsFailed ? 'FAILED' : 'PASSED'} - view reports in ${buildDir}"
	ant.fail(if: testsFailed, message: 'JS Tests Failed')
}
task all(dependsOn: ['clean', 'jshintjs','test','jsdocjs','minifyjs','gzipjs']) << {}

